version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: expense-tracker-mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: expense_tracker
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - expense-tracker-network

  # API Gateway
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - user-service
      - expense-service
      - budget-service
    networks:
      - expense-tracker-network

  # User Service
  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/user_db
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=rootpassword
    depends_on:
      - mysql
    networks:
      - expense-tracker-network

  # Expense Service
  expense-service:
    build: ./expense-service
    container_name: expense-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/expense_db
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=rootpassword
    depends_on:
      - mysql
      - currency-service
    networks:
      - expense-tracker-network

  # Budget Service
  budget-service:
    build: ./budget-service
    container_name: budget-service
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/budget_db
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=rootpassword
      - BUDGET_SCHEDULER_ENABLED=true
    depends_on:
      - mysql
      - expense-service
    networks:
      - expense-tracker-network

  # Currency Conversion Service (Node.js)
  currency-service:
    build: ./currency-service
    container_name: currency-service
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    networks:
      - expense-tracker-network

volumes:
  mysql_data:

networks:
  expense-tracker-network:
    driver: bridge